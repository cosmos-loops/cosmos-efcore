using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;

/*
 * Reference: Zack.EFCore.Batch
 *   url: https://github.com/yangzhongke/Zack.EFCore.Batch
 *   author: 杨中科
 *
 * Reference: WeihanLi.EntityFramework
 *   url: https://github.com/WeihanLi/WeihanLi.EntityFramework
 *   author: 李卫涵
 */

namespace Cosmos.EntityFrameworkCore.Internals
{
    internal static class ColumnInfoExtensions
    {
        /// <summary>
        /// Get properties except for navigationProperties or  autogenerated ones
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="entityType"></param>
        /// <returns></returns>
        public static ColumnInfo[] GetColumnInfoColl<TEntity>(this IEntityType entityType) where TEntity : class
        {
            //skip navigationProperties
            var propertyInfos = typeof(TEntity).GetProperties().Where(p => !__isNavigationProp(p) && p.CanWrite && p.CanRead);
            var databaseProperties = new List<ColumnInfo>();

            foreach (var prop in propertyInfos)
            {
                var propertyName = prop.Name;
                var entityProperty = entityType.FindProperty(propertyName);

                //this property is not mapped
                if (entityProperty is null)
                    continue;

                //skip the columns those are autogenerated
                if (entityProperty.ValueGenerated == ValueGenerated.OnAdd
                 || entityProperty.ValueGenerated == ValueGenerated.OnAddOrUpdate)
                    continue;

                var dbColName = entityProperty.GetColumnName(StoreObjectIdentifier.SqlQuery(entityType));
                var dbColType = entityProperty.GetColumnType();
                var dbProp = new ColumnInfo
                {
                    ColumnName = dbColName,
                    ColumnType = dbColType,
                    Property = prop,
                    PropertyName = propertyName,
                    PropertyType = prop.PropertyType,
                    Metadata = entityProperty
                };

                databaseProperties.Add(dbProp);
            }

            return databaseProperties.ToArray();

            // ReSharper disable once InconsistentNaming
            bool __isNavigationProp(PropertyInfo propInfo)
            {
                return entityType.FindNavigation(propInfo) != null;
            }
        }

        public static string GetColumnName(this PropertyEntry propertyEntry)
        {
            var storeObjectId =
                StoreObjectIdentifier.Create(propertyEntry.Metadata.DeclaringEntityType, StoreObjectType.Table);
            return propertyEntry.Metadata.GetColumnName(storeObjectId.GetValueOrDefault());
        }
    }
}