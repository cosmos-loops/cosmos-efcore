<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cosmos.EntityFrameworkCore</name>
    </assembly>
    <members>
        <member name="T:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions">
            <summary>
            Extensions for solid page for EntityFrameworkCore
            </summary>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.AsPageable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Nullable{System.Int32})">
            <summary>
            Make original query result to QueryablePage collection.
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="source">DbSet source</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.AsPageable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Make original query result to QueryablePage collection.
            </summary>
            <typeparam name="T">element type of your enumerable result</typeparam>
            <param name="source">DbSet source</param>
            <param name="pageSize">page size</param>
            <param name="limitedMemberCount">limited member count</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.GetPage``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Int32)">
            <summary>
            Get specific page from original EfCore DbSet`1 source
            </summary>
            <typeparam name="T">element type of your EfCore DbSet`1 source</typeparam>
            <param name="source">DbSet source</param>
            <param name="pageNumber">page number</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.GetPage``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Int32,System.Int32)">
            <summary>
            Get specific page from original EfCore DbSet`1 source
            </summary>
            <typeparam name="T">element type of your EfCore DbSet`1 source</typeparam>
            <param name="source">DbSet source</param>
            <param name="pageNumber">page number</param>
            <param name="pageSize">page size</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.GetPage``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32)">
            <summary>
            Get specific page from original EfCore DbSet`1 source
            </summary>
            <typeparam name="T">element type of your EfCore DbSet`1 source</typeparam>
            <param name="source">DbSet source</param>
            <param name="predicate">Predicate</param>
            <param name="pageNumber">page number</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.Collections.Pagination.EfCoreSolidPageExtensions.GetPage``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Get specific page from original EfCore DbSet`1 source
            </summary>
            <typeparam name="T">element type of your EfCore DbSet`1 source</typeparam>
            <param name="source">DbSet source</param>
            <param name="predicate">Predicate</param>
            <param name="pageNumber">page number</param>
            <param name="pageSize">page size</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Core.ColumnInfo">
            <summary>
            Column information
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Core.ColumnInfo.Name">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Core.ColumnInfo.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Core.ColumnInfo.Property">
            <summary>
            Binding to
            </summary>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsHelper">
            <summary>
            Microsoft EntityFramework Core options helper/
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsHelper.CreateOptions(System.Action{Cosmos.EntityFrameworkCore.EfCoreOptions})">
            <summary>
            Get Microsoft EntityFramework Core options
            </summary>
            <param name="optAct"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsHelper.GuardOptions(Cosmos.EntityFrameworkCore.EfCoreOptions)">
            <summary>
            Guard Microsoft EntityFramework Core options options
            </summary>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsRegistrar">
            <summary>
            EntityFramework Core Options registrar.
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsRegistrar.Register``1(Cosmos.EntityFrameworkCore.EfCoreOptions)">
            <summary>
            Register
            </summary>
            <param name="options"></param>
            <typeparam name="TContext"></typeparam>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsRegistrar.Get``1">
            <summary>
            Get
            </summary>
            <typeparam name="TContext"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Core.EfCoreOptionsRegistrar.TryGet``1(Cosmos.EntityFrameworkCore.EfCoreOptions@)">
            <summary>
            Try get
            </summary>
            <param name="options"></param>
            <typeparam name="TContext"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.DbContextBase">
            <summary>
            DbContext base
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Cosmos.EntityFrameworkCore.EfCoreOptions)">
            <summary>
            DbContext base
            </summary>
            <param name="options"></param>
            <param name="ownOptions"></param>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.DbContextBase.CurrentConnection">
            <summary>
            Internal connection...
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.DbContextBase.EnableAudit">
            <summary>
            Enable auto history
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.OnSavingChanges">
            <summary>
            On saving changes
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.OnSavedChanges">
            <summary>
            On saved changes
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.SaveChanges">
            <summary>
            Save changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Save changes async
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.Commit">
            <summary>
            Commit
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.CommitAsync(System.Threading.CancellationToken)">
            <summary>
            Commit async
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.Rollback">
            <inheritdoc />
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.Commit(System.Action)">
            <summary>
            Commit
            </summary>
            <param name="callback"></param>
            <exception cref="T:Cosmos.Data.ConcurrencyException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.DbContextBase.CommitAsync(System.Action,System.Threading.CancellationToken)">
            <summary>
            Commit async
            </summary>
            <param name="callback"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:Cosmos.Data.ConcurrencyException"></exception>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EfCoreException">
            <summary>
            EfCore exception
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfCoreException.DEFAULT_DBCTX_FLAG">
            <summary>
            Default db ctx flag
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfCoreException.DEFAULT_DBCTX_ERROR_MESSAGE">
            <summary>
            Default db ctx error message
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfCoreException.DEFAULT_DBCTX_ERROR_CODE">
            <summary>
            Default db ctx error code
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Data.IDbConnection)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Data.IDbConnection,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Data.IDbConnection,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Data.IDbConnection,System.Int64,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreException.#ctor(System.Data.IDbConnection,System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfCoreException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreException.Database">
            <summary>
            Gets database
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreException.ConnectionString">
            <summary>
            Gets connection string
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreException.ConnectionState">
            <summary>
            Gets connection state
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.ClearCache(Cosmos.EntityFrameworkCore.IEfContext)">
            <summary>
            Clear cache
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.IsInMemory(Cosmos.EntityFrameworkCore.DbContextBase)">
            <summary>
            Is in memory
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetEntityType``1(Cosmos.EntityFrameworkCore.DbContextBase)">
            <summary>
            Get EntityType for given type.
            </summary>
            <param name="context"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetEntityType(Cosmos.EntityFrameworkCore.DbContextBase,System.Type)">
            <summary>
            Get EntityType for given type.
            </summary>
            <param name="context"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetTableName``1(Cosmos.EntityFrameworkCore.DbContextBase)">
            <summary>
            Get table name
            </summary>
            <param name="context"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetTableName(Cosmos.EntityFrameworkCore.DbContextBase,System.Type)">
            <summary>
            Get table name
            </summary>
            <param name="context"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetKeyNames``1(Cosmos.EntityFrameworkCore.DbContextBase)">
            <summary>
            Get key names.
            </summary>
            <param name="context"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetEntityEntry``1(Microsoft.EntityFrameworkCore.DbContext,``0,System.Boolean@)">
            <summary>
            Get entity entry.
            </summary>
            <param name="dbCtx"></param>
            <param name="entity"></param>
            <param name="existBefore"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.GetDbContext``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
            Get <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            </summary>
            <param name="dbSet"></param>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.ToTransactionWrapper(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)">
            <summary>
            To traction wrapper
            </summary>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.ToTransactionWrapper(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction,Cosmos.Data.Common.TransactionAppendOperator)">
            <summary>
            To traction wrapper
            </summary>
            <param name="transaction"></param>
            <param name="operator"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.IncludeIfNeed``2(System.Linq.IQueryable{``0},System.Boolean,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Include if need...
            </summary>
            <param name="source"></param>
            <param name="condition"></param>
            <param name="property"></param>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreExtensions.IncludeIfNeed``2(System.Linq.IQueryable{``0},System.Func{System.Boolean},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Include if need...
            </summary>
            <param name="source"></param>
            <param name="condition"></param>
            <param name="property"></param>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EfCoreOptions">
            <summary>
            EfCore options
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreOptions.ConnectionName">
            <summary>
            Connection name
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreOptions.ConnectionString">
            <summary>
            Connection string
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreOptions.EnableRangeOperation">
            <summary>
            Enable Audit, default is true.
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreOptions.EnableAudit">
            <summary>
            Enable Audit, default is false.
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfCoreOptions.AuditHistoryOptions">
            <summary>
            Internal
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreOptions.AuditConfig(System.Action{Cosmos.Models.Audits.AuditHistoryOptions})">
            <summary>
            Configure AuditHistoryOptions
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreOptions.Create">
            <summary>
            To Create a new Microsoft EntityFramework Core options
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreOptions.Create(System.Action{Cosmos.EntityFrameworkCore.EfCoreOptions})">
            <summary>
            To Create a new Microsoft EntityFramework Core options
            </summary>
            <param name="optAct"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfCoreOptionsGuard.For(Cosmos.EntityFrameworkCore.EfCoreOptions)">
            <summary>
            Guard Microsoft EntityFramework Core options
            </summary>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EfException">
            <summary>
            EfCore exception
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfException.DEFAULT_DBCTX_FLAG">
            <summary>
            Default db ctx flag
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfException.DEFAULT_DBCTX_ERROR_MESSAGE">
            <summary>
            Default db ctx error message
            </summary>
        </member>
        <member name="F:Cosmos.EntityFrameworkCore.EfException.DEFAULT_DBCTX_ERROR_CODE">
            <summary>
            Default db ctx error code
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Int64,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Data.IDbConnection)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Data.IDbConnection,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Data.IDbConnection,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Data.IDbConnection,System.Int64,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EfException.#ctor(System.Data.IDbConnection,System.Int64,System.String,System.String,System.Exception)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EfException"/>
            </summary>
            <param name="connection"></param>
            <param name="errorCode"></param>
            <param name="errorMessage"></param>
            <param name="flag"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfException.Database">
            <summary>
            Gets database
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfException.ConnectionString">
            <summary>
            Gets connection string
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EfException.ConnectionState">
            <summary>
            Gets connection state
            </summary>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapExtensions">
            <summary>
            Cosmos entity map extensions.
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapExtensions.IsMatchedEntityMappingRule(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>
            Is matched entity mapping rule
            </summary>
            <param name="type"></param>
            <param name="bodyTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1">
            <summary>
            Entity map scanner
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1.#ctor(System.Type)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1"/>
            </summary>
            <param name="entityMapType"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1.#ctor(System.Type,System.String)">
            <summary>
            Create a new instance of <see cref="T:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1"/>
            </summary>
            <param name="entityMapType"></param>
            <param name="limitedAssemblies"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1.GetSkipAssembliesNamespaces">
            <summary>
            Get skip assemblies namespaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1.GetLimitedAssembliesNamespaces">
            <summary>
            Get limited assemblies namespaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.EntityMapScanner`1.TypeFilter">
            <summary>
            Type filter
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EntityMapping.IEntityMap">
            <summary>
            Interface for Entity Map
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.IEntityMap.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Map
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1">
            <summary>
            Map base
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.ModelBuilder">
            <summary>
            模型生成器
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="modelBuilder">模型生成器</param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.MapTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
             <summary>
            Map Table
             <br />
             映射表
             </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Map Version
            <br />
            映射乐观离线锁
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.MapProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Map Properties
            <br />
            映射属性
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.MapAssociations(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Map Associations
            <br />
            映射导航属性
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.EntityMapping.MapBase`1.HasQueryFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Has query filter
            <br />
            映射过滤条件
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.FluentUpdateBuilder`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            name is the expression of property's name, and value is the expression of the value
            </summary>
            <param name="name">something like: b=>b.Age</param>
            <param name="value">something like: b=>b.Age+1</param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.IEfContext">
            <summary>
            Interface for DbContext
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.IEfContext.SaveChanges">
            <summary>
            Save change
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.IEfContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Save change async
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Internals.ColumnInfoExtensions.GetColumnInfoColl``1(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
            Get properties except for navigationProperties or  autogenerated ones
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Internals.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            GetMemberName
            </summary>
            <typeparam name="TEntity">TEntity</typeparam>
            <typeparam name="TMember">TMember</typeparam>
            <param name="memberExpression">get member expression</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Internals.ExpressionExtensions.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            GetMemberInfo
            </summary>
            <typeparam name="TEntity">TEntity</typeparam>
            <typeparam name="TMember">TMember</typeparam>
            <param name="expression">get member expression</param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Internals.SelectExpressionExtensions.Parse``1(System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.DbContext,System.Boolean)">
            <summary>
            parse select statement of queryable
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="queryable"></param>
            <param name="ctx"></param>
            <param name="ignoreQueryFilters"></param>
            <returns></returns>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.Parameters">
            <summary>
            parameters of query
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.ProjectionSql">
            <summary>
            columns of select
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.PredicateSql">
            <summary>
            where clause
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.FullSql">
            <summary>
            Full Sql
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Internals.ParsedSelectResult.QuerySqlGenerator">
            <summary>
            Query Sql Generator
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.SqlRaw.ISqlRawQueryGenerator.ProjectionSql">
            <summary>
            Gets the project Sql.
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.SqlRaw.ISqlRawQueryGenerator.PredicateSql">
            <summary>
            Gets or sets the condition sql
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.SqlRaw.ISqlRawQueryGenerator.GetCommand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
            Get relational command by the given SelectExpression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.SqlRaw.SqlRawExtensions">
            <summary>
            Cosmos type extensions
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.SqlRaw.SqlRawHelper.DiffSql(System.String,System.String)">
            <summary>
            exclude the oldSQL from newSQL
            Diff("abc","abc12")=="12"
            </summary>
            <param name="oldSql"></param>
            <param name="newSql"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.SqlRaw.SqlRawInsertCommandExtensions.BuildDataTable``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Build DataTable for items
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="dbSet"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.IRepository`2">
            <summary>
            Interface for reposiory
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.IStore`2">
            <summary>
            Interface for store
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.IStore`2.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.IStore`2.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2">
            <summary>
            Interface of Queryable store
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.Exist(`1)">
            <summary>
            Exists or not by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.Exist(`1[])">
            <summary>
            Exists or not by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.Exist(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Exists or not by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.ExistAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Exists or not by id async
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.ExistAsync(`1[],System.Threading.CancellationToken)">
            <summary>
            Exists or not by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.ExistAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Exists or not by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.FindByIds(`1[])">
            <summary>
            Find a collection of result by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Find a collection of result by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.FindByIdsAsync(`1[])">
            <summary>
            Find a collection of result by a set of id async
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Find a collection of result by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IQueryableStoreAppend`2.Query(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find a collection of result by by given condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2">
            <summary>
            Interface of Writeable store
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWith(`0,System.String[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWith(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithout(`0,System.String[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithout(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithAsync(`0,System.String[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithoutAsync(`0,System.String[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UpdateWithoutAsync(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Remove by a set of id
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Remove by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UnsafeRemove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Unsafe remove by a set of id
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UnsafeRemove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Unsafe remove range
            </summary>
            <param name="predicate"></param>
            <param name="ignoreQueryFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UnsafeRemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Unsafe remove by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.IWriteableStoreAppend`2.UnsafeRemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Unsafe remove range async
            </summary>
            <param name="predicate"></param>
            <param name="ignoreQueryFilters"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.RepositoryBase`3">
            <summary>
            Repository base
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.RepositoryBase`3.#ctor(`0)">
            <summary>
            Repository base
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.RepositoryBase`3.#ctor(`0,System.Boolean)">
            <summary>
            Repository base
            </summary>
            <param name="context"></param>
            <param name="includeUnsafeOpt"></param>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.RepositoryBase`3.CurrentTraceId">
            <inheritdoc />
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.RepositoryBase`3.UnitOfWork">
            <inheritdoc />
        </member>
        <member name="T:Cosmos.EntityFrameworkCore.Store.StoreBase`3">
            <summary>
            Store base
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.#ctor(`0)">
            <summary>
            Store base
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.#ctor(`0,System.Boolean)">
            <summary>
            Store base
            </summary>
            <param name="context"></param>
            <param name="includeUnsafeOpt"></param>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.IncludeUnsafeOpt">
            <summary>
            Include unsafe opt
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.EntityType">
            <summary>
            Entity type
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.TableName">
            <summary>
            Table name
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Schema">
            <summary>
            Schema
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.DeletableEntity">
            <summary>
            To flag this entity type has impl IDelete interface or not.
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RawTypedContext">
            <summary>
            Context
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Set">
            <summary>
            Gets typed DbSet
            </summary>
        </member>
        <member name="P:Cosmos.EntityFrameworkCore.Store.StoreBase`3.NoTrackingSet">
            <summary>
            No tracking set
            </summary>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Query(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find a collection of result by given condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Add(`1)">
            <summary>
            Add entity
            </summary>
            <param name="entity"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Add(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Add a set of entity
            </summary>
            <param name="entities"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.AddAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Add entity async
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.AddAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Add a set of entity async
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Count(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Count
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.CountAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Count async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Exist(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Exist
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.ExistAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Exist async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Exist(`2)">
            <summary>
            Exist
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Exist(`2[])">
            <summary>
            Exist
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Exist(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Exists or not by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.ExistAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Exist async
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.ExistAsync(`2[],System.Threading.CancellationToken)">
            <summary>
            Exist async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.ExistAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            Exists or not by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Find(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find first or default result
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find first or default result async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindById(`2)">
            <summary>
            Find a result by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindByIdAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Find a result by id async
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindByIds(`2[])">
            <summary>
            Find a collection of result by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindByIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Find a collection of result by a set of id
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindByIdsAsync(`2[])">
            <summary>
            Find a collection of result by a set of id async
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            Find a collection of result by a set of id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindFirst(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find first  result by given condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindFirstAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find first  result by given condition async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindFirstOrDefault(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find first or default result
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindFirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find first or default result async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindSingle(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find single result by given condition
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindSingleAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find single result by given condition async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindSingleOrDefault(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Find single or default result
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.FindSingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Find single or default result async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetOne(`2)">
            <summary>
            Get one or null
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetOne(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Get one or null...
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetOneAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Get one or null
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetOneAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Get one or null...
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetPage(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Query pageable results by given condition
            </summary>
            <param name="predicate"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.GetPageAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Query pageable results by given condition async
            </summary>
            <param name="predicate"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Remove(`2)">
            <summary>
            Remove a entity by id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Remove(`1)">
            <summary>
            Remove a entity by entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Remove a set of entity by a set of given entity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Remove(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Remove by given condition
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RemoveAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Remove a entity by given id async
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RemoveAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Remove a entity by given entity async
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Remove a set of given entity async
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Remove by given condition async
            </summary>
            <param name="predicate"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Remove(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Remove a set of entity by a set if id
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            Remove a set of entity by a set of given id async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemove(`2)">
            <summary>
            Unsafe remove
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemove(`1)">
            <summary>
            Unsafe remove
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Unsafe remove
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemoveAsync(`2,System.Threading.CancellationToken)">
            <summary>
            Unsafe remove async
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemoveAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Unsafe remove async
            </summary>
            <param name="entity"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            Unsafe remove async
            </summary>
            <param name="entities"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemove(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            Unsafe remove
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemove(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean)">
            <summary>
            Unsafe remove range
            </summary>
            <param name="predicate"></param>
            <param name="ignoreQueryFilters"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemoveAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            Unsafe remove async
            </summary>
            <param name="ids"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UnsafeRemoveAsync(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Unsafe remove range async
            </summary>
            <param name="predicate"></param>
            <param name="ignoreQueryFilters"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Update(`1)">
            <summary>
            Update a entity
            </summary>
            <param name="entity"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.Update(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Update a set of entity
            </summary>
            <param name="entities"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWith(`1,System.String[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWith(`1,System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithout(`1,System.String[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithout(`1,System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateAsync(`1)">
            <summary>
            Update entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateAsync(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Update a set of entity
            </summary>
            <param name="entities"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithAsync(`1,System.String[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithAsync(`1,System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Update a entity with property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithoutAsync(`1,System.String[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propNames"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Cosmos.EntityFrameworkCore.Store.StoreBase`3.UpdateWithoutAsync(`1,System.Linq.Expressions.Expression{System.Func{`1,System.Object}}[])">
            <summary>
            Update a entity without property names.
            </summary>
            <param name="entity"></param>
            <param name="propertyExpressions"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.RowId">
            <summary>
            Gets or sets the source of row Id
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.TableName">
            <summary>
            Gets or sets the name of table
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.OriginalVersion">
            <summary>
            Gets or sets the original version.
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.OriginalValue">
            <summary>
            Gets or sets the original value
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.CurrentVersion">
            <summary>
            Gets or sets the current version.
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.CurrentValue">
            <summary>
            Gets or sets the current value
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.Kind">
            <summary>
            Gets or sets the change kind
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.OperatorId">
            <summary>
            Gets or sets the operator's Id
            </summary>
        </member>
        <member name="P:Cosmos.Models.Audits.AuditHistory.CreatedTime">
            <summary>
            Gets or sets the created time of this item.
            </summary>
        </member>
        <member name="T:Cosmos.Models.Audits.EfCoreAuditHistoryExtensions">
            <summary>
            Cosmos DbContext extensions
            </summary>
        </member>
        <member name="M:Cosmos.Models.Audits.EfCoreAuditHistoryExtensions.EnsureAuditHistory(Microsoft.EntityFrameworkCore.DbContext,Cosmos.Models.Audits.AuditHistoryOptions)">
            <summary>
            Ensures the automatic history.
            </summary>
            <param name="context">The context.</param>
            <param name="options"></param>
        </member>
        <member name="M:Cosmos.Models.Audits.EfCoreAuditHistoryExtensions.EnsureAuditHistory``1(Microsoft.EntityFrameworkCore.DbContext,System.Func{``0},Cosmos.Models.Audits.AuditHistoryOptions)">
            <summary>
            Ensures the automatic history.
            </summary>
            <param name="context"></param>
            <param name="createHistoryFactory"></param>
            <param name="options"></param>
            <typeparam name="TAuditHistory"></typeparam>
        </member>
        <member name="T:Cosmos.Models.Audits.EnableAuditExtensions">
            <summary>
            Cosmos <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> extensions.
            </summary>
        </member>
    </members>
</doc>
